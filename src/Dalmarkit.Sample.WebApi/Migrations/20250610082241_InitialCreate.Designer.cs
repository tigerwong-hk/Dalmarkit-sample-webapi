// <auto-generated />
using System;
using Dalmarkit.Sample.EntityFrameworkCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dalmarkit.Sample.WebApi.Migrations
{
    [DbContext(typeof(DalmarkitSampleDbContext))]
    [Migration("20250610082241_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dalmarkit.Common.AuditTrail.ApiLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int>("DurationMsec")
                        .HasColumnType("integer");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogDetail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int>("ResponseStatusCode")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("TraceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserIp")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActionName");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("EventType");

                    b.HasIndex("ModifiedOn");

                    b.HasIndex("ResponseStatusCode");

                    b.HasIndex("TraceId");

                    b.HasIndex("Url");

                    b.HasIndex("UserId");

                    b.HasIndex("UserIp");

                    b.ToTable("ApiLogs");
                });

            modelBuilder.Entity("Dalmarkit.Common.AuditTrail.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("AuditScopeId")
                        .HasColumnType("uuid");

                    b.Property<string>("ChangedValues")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int>("DurationMsec")
                        .HasColumnType("integer");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("LogDetail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TraceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChangedValues");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ChangedValues"), "gin");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("ModifiedOn");

                    b.HasIndex("PrimaryKey");

                    b.HasIndex("TraceId");

                    b.HasIndex("UserId");

                    b.HasIndex("Table", "PrimaryKey");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Dalmarkit.Sample.EntityFrameworkCore.Entities.DependentEntity", b =>
                {
                    b.Property<Guid>("DependentEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreateRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DependentEntityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("ModifierId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DependentEntityId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EntityId");

                    b.HasIndex("ModifiedOn");

                    b.HasIndex("ModifierId");

                    b.HasIndex("DependentEntityName", "EntityId")
                        .IsUnique()
                        .HasFilter("\"IsDeleted\" = false");

                    b.HasIndex("CreateRequestId", "ClientId", "EntityHash")
                        .IsUnique();

                    b.ToTable("DependentEntities");
                });

            modelBuilder.Entity("Dalmarkit.Sample.EntityFrameworkCore.Entities.Entity", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreateRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("ModifierId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EntityName")
                        .IsUnique()
                        .HasFilter("\"IsDeleted\" = false");

                    b.HasIndex("ModifiedOn");

                    b.HasIndex("ModifierId");

                    b.HasIndex("CreateRequestId", "ClientId")
                        .IsUnique();

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("Dalmarkit.Sample.EntityFrameworkCore.Entities.EntityImage", b =>
                {
                    b.Property<Guid>("EntityImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreateRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("ModifierId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ObjectExtension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EntityImageId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EntityId");

                    b.HasIndex("ModifiedOn");

                    b.HasIndex("ModifierId");

                    b.HasIndex("CreateRequestId", "ClientId")
                        .IsUnique();

                    b.HasIndex("ObjectName", "EntityId")
                        .IsUnique()
                        .HasFilter("\"IsDeleted\" = false");

                    b.ToTable("EntityImages");
                });

            modelBuilder.Entity("Dalmarkit.Sample.EntityFrameworkCore.Entities.EvmEvent", b =>
                {
                    b.Property<Guid>("EvmEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BlockchainNetwork")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContractAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreateRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventDetail")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TransactionHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EvmEventId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CreateRequestId", "ClientId")
                        .IsUnique();

                    b.ToTable("EvmEvents");
                });

            modelBuilder.Entity("Dalmarkit.Sample.EntityFrameworkCore.Entities.DependentEntity", b =>
                {
                    b.HasOne("Dalmarkit.Sample.EntityFrameworkCore.Entities.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Dalmarkit.Sample.EntityFrameworkCore.Entities.EntityImage", b =>
                {
                    b.HasOne("Dalmarkit.Sample.EntityFrameworkCore.Entities.Entity", "Entity")
                        .WithMany("EntityImages")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Dalmarkit.Sample.EntityFrameworkCore.Entities.Entity", b =>
                {
                    b.Navigation("EntityImages");
                });
#pragma warning restore 612, 618
        }
    }
}
